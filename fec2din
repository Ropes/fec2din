#!/usr/bin/python

import sys
import os
import boto
# from pprint import pprint
# from inspect import getmembers
from datetime import datetime


# You can uncomment and set these, or set the env variables AWSAccessKeyId & AWSSecretKey
# AWS_ACCESS_KEY_ID="aaaaaaaaaaaaaaaaaaaa"
# AWS_SECRET_ACCESS_KEY="bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"

ec2_url="https://us-east-1.ec2.amazonaws.com"

try:
	AWS_ACCESS_KEY_ID
except NameError:
	try:
		AWS_ACCESS_KEY_ID=os.environ['EC2_ACCESS_KEY']
		AWS_SECRET_ACCESS_KEY=os.environ['EC2_SECRET_KEY']
	except KeyError:
		print """Please set environment variables EC2_ACCESS_KEY & EC2_SECRET_KEY
Please note that while ec2-describe-instances and other CLI tools use
EC2_CERT & EC2_PRIVATE_KEY, fec2din uses the access key & secret key.
This would look something like:
	export EC2_ACCESS_KEY=JFIOQNAKEIFJJAKDLIJA
	export EC2_SECRET_KEY=3jfioajkle+OnfAEV5OIvj5nLnRy2jfklZRop3nn
"""
		sys.exit(1)


try:
	ec2_url = "https://%s.ec2.amazonaws.com" % os.environ['EC2_REGION']
except KeyError:
	pass

try:
	ec2_url = os.environ['EC2_URL']
except KeyError:
	pass

ec2_conn = boto.connect_ec2_endpoint(ec2_url, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)

if len(sys.argv) == 2:
	instance_list = [ sys.argv[1] ]
else:
	instance_list = None

reservations = ec2_conn.get_all_instances(instance_list)

running_instances = {}
for reservation in reservations:
	for instance in reservation.instances:
		if instance.state != "running" and instance_list == None:
			sys.stderr.write("Disqualifying instance %s: not running\n\n" % ( instance.id ) )
		else:
			# pprint (getmembers(instance))
			az = instance.placement
			instance_type = instance.instance_type
			running_instances[ (instance_type, az ) ] = running_instances.get( (instance_type, az ) , 0 ) + 1
			print "= %s =" % instance.id
			print "AMI:	%s" % instance.image_id
			print "Type:	%s (%s)" % ( instance.instance_type , instance.architecture  )
			print "Public:	%s (%s)" % ( instance.ip_address, instance.public_dns_name )
			print "PrivIP:	%s" % ( instance.private_ip_address )
			print "PubKey:	%s" % ( instance.key_name )
			launch_ts = boto.utils.parse_ts(instance.launch_time)
			days_up = (datetime.utcnow() - launch_ts).days
			# print "%s %s" % (datetime.now(), launch_ts)
			print "Days:	%s (%s)" % ( days_up, launch_ts.strftime('%Y-%m-%d') )
			print "AZ:	%s" % ( instance.placement )
			print "Group%s:	%s" % ( 's' if ( len(instance.groups) > 1 ) else '', ",".join( [x.name for x in instance.groups] ) )
			root_device = instance.root_device_name if instance.root_device_name else "/dev/sda1?"
			if instance.root_device_type == 'instance-store':
				root_type = "ephemeral"
				root_device = "ROOT"
			elif instance.root_device_type == 'ebs':
				root_type = "EBS"
			print "\t%s  ( %s )" % (root_device, root_type )
			for block_device, mapping in instance.block_device_mapping.items():
				# ephemeral_mark = "+" if mapping.ebs else "-"
				print "\t%s" % (  block_device)
				# pprint( getmembers(mapping))
			print
			
# reduce( lambda x, y: x+y, instance.groups )
			


